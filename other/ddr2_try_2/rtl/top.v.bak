module top(
 input clk_50_0,
 
 //外部接口
   output  [ 14: 0] mem_addr,
   output  [  2: 0] mem_ba,
   output           mem_cas_n,
   output  [  0: 0] mem_cke,
   inout   [  0: 0] mem_clk,
   inout   [  0: 0] mem_clk_n,
   output  [  0: 0] mem_cs_n,
   output  [  1: 0] mem_dm,
   inout   [ 15: 0] mem_dq,
   inout   [  1: 0] mem_dqs,
   output  [  0: 0] mem_odt,
   output           mem_ras_n,
   output           mem_we_n  

);



reg [1:0] state;
localparam idle=2'b00;
localparam read=2'b01;
localparam write=2'b10;
always @ (posedge clk_150_0 or posedge reset_syn)
begin
 if(reset_syn==1'b1)
  state<=idle;
 else begin
  case(state)
  
  idle:begin
  end
  
  read:begin
  end
  
  write:begin
  end
  
  default:begin
  end
  
  endcase
 end
end

ddr_ctrl ddr_ctrl_1(
   input  wire  source_clk,
	input  rst_n,
	
	output phy_clk,

/*ddr读写用户接口信号*/	
   output                   local_init_done,         //ddr initial done

	input                    wr_burst_req,            //DDR Burst写请求         	
	input  [9:0]             wr_burst_len,	           //DDR Burst写长度
	input [ADDR_WIDTH - 1:0] wr_burst_addr,           //DDR Burst写地址
   output                   wr_burst_data_req,	     //写入数据请求	
	input [DATA_WIDTH - 1:0] wr_burst_data,           //DDR Burst写数据
   output                   wr_burst_finish,         //DDR Burst写完成信号
	
	input                    rd_burst_req,            //DDR Burst读请求 
	input  [9:0]             rd_burst_len,	           //DDR Burst读长度
	input [ADDR_WIDTH - 1:0] rd_burst_addr,           //DDR Burst读地址		
   output                   rd_burst_data_valid,     //DDR Burst读数据有效		
	output[DATA_WIDTH - 1:0] rd_burst_data,           //DDR Burst读数据
   output                   rd_burst_finish,         //DDR Burst读完成信号
	
/*ddr接口信号*/	
   .mem_addr(mem_addr),
   .mem_ba(mem_ba),
   . mem_cas_n( mem_cas_n),
  .mem_cke(mem_cke),
   .mem_clk(mem_clk),
   .mem_clk_n(mem_clk_n),
  .mem_cs_n(mem_cs_n),
   .mem_dm(mem_dm),
   . mem_dq(mem_dq),
  . mem_dqs(mem_dqs),
  . mem_odt(mem_odt),
   . mem_ras_n(mem_ras_n),
   . mem_we_n(mem_we_n)
	);