module testbench;
reg clk_50;
wire clk_50_90t;
wire clk_150_0t;
wire clk_150_90t;
wire locked;
initial begin
clk_50<=1'b0;
end
always #10 clk_50<=~clk_50;



pllip (
	.areset(1'b0),
	.inclk0(clk_50),
	.c0(clk_50_90t),
	.c1(clk_150_0t),
	.c2(clk_150_90t),
	.locked(locked)
	);
	
wire clk_50_0=clk_50&locked;
wire clk_50_90=clk_50_90t&locked;
wire clk_150_0=clk_150_0t&locked;
wire clk_150_90=clk_150_90t&locked;



reg [2:0] data_in=3'b000;
reg [1:0] state=2'b00;
reg [2:0] wait_3=3'b000;
reg wreq=1'b0;
reg [15:0] w_data=15'b0;
always @(posedge clk_50_0)
begin
 case(state)
 2'b00:begin
  if(wait_3==3'b111)
   begin
	 wait_3<=3'b000;
	 state<=2'b01;
	end
  else
   wait_3=wait_3+3'b001;
  end
  2'b01:begin
  if(wait_3==3'b111)
   begin
	 wait_3<=3'b000;
	 state<=2'b10;
	 wreq<=1'b0;
	end
  else
   begin
	 wreq<=1'b;
	 wdata<=wdata+15'd1;
   end
  end
  2'b10:begin
  if(wait_3==3'b111)
   begin
	 wait_3<=3'b000;
	 state<=2'b11;
	end
  else
   wait_3=wait_3+3'b001;
  end
  2'b11:begin
  if(wait_3==3'b111)
   begin
	 wait_3<=3'b000;
	 state<=2'b00;
	 rreq<=1'b0;
	end
  else
   begin
	 rreq<=1'b;
   end 
  default:begin
	state<=2'b00;
   wait_3<=3'b000;
  end
  endcase
end


reg aclr=1'b0;
initial begin
#1000
aclr<=1'b1;
#1
aclr<=1'b0;
#100
aclr<=1'b1;
#10
aclr<=1'b0;
end

wire [15:0] data_out;
wire rempty;
wire wempty;
wire rfull;
wire wfull;
wire ruse;
wire wuse;
fifoip (
	.aclr(aclr),
	.data(data_in),
	.rdclk(clk_150_90),
	.rdreq(rreq),
	.wrclk(clk_50_90),
	.wrreq(wreq),
	.q(data_out),
	.rdempty(rempty),
	.rdfull(rfull),
	.rdusedw(ruse),
	.wrempty(wempty),
	.wrfull(wfull),
	.wrusedw(wuse)
	);
	
endmodule
